The Pythonic solution is to make use of Python’s powerful dictionaries.
 Also known as associative arrays in some languages, Python’s dictionaries allow a simple one-to-one matching of a key and a value.
 When used as part of a switch case statement, the keys are what would normally trigger the case blocks.
 The interesting part is that the values in the dictionaries refer to functions that contain the code that would normally be inside the case blocks. 
 Here’s the above code rewritten as a dictionary and functions:
 
 options = {0 : zero,
                1 : sqr,
                4 : sqr,
                9 : sqr,
                2 : even,
                3 : prime,
                5 : prime,
                7 : prime,
}
 
def zero():
    print "You typed zero.\n"
 
def sqr():
    print "n is a perfect square\n"
 
def even():
    print "n is an even number\n"
 
def prime():
    print "n is a prime number\n"
	
	
to exucute :	
options[num]()




As a final note, the above example doesn’t provide a default case in case nothing matches.
 You can make up for this by having the actual lookup be inside an if-else block, with the
 condition checking for the presence of the key in the dictionary (using the ‘<keyname> in <dictionary>’ idiom).
 But a more Pythonic way is to wrap it in a try/except block. If the option isn’t presence, 
a KeyError Exception will be raised which can then be caught and the default code executed.